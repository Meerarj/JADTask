// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/studentsapp.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentClient is the client API for Student service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentClient interface {
	GetStudents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Student_GetStudentsClient, error)
	GetStudentBySection(ctx context.Context, in *Section, opts ...grpc.CallOption) (*StudentInfo, error)
	GetStudentByClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*StudentInfo, error)
	CreateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteStudent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type studentClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentClient(cc grpc.ClientConnInterface) StudentClient {
	return &studentClient{cc}
}

func (c *studentClient) GetStudents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Student_GetStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Student_ServiceDesc.Streams[0], "/studentdetails.Student/GetStudents", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentGetStudentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Student_GetStudentsClient interface {
	Recv() (*StudentInfo, error)
	grpc.ClientStream
}

type studentGetStudentsClient struct {
	grpc.ClientStream
}

func (x *studentGetStudentsClient) Recv() (*StudentInfo, error) {
	m := new(StudentInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentClient) GetStudentBySection(ctx context.Context, in *Section, opts ...grpc.CallOption) (*StudentInfo, error) {
	out := new(StudentInfo)
	err := c.cc.Invoke(ctx, "/studentdetails.Student/GetStudentBySection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) GetStudentByClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*StudentInfo, error) {
	out := new(StudentInfo)
	err := c.cc.Invoke(ctx, "/studentdetails.Student/GetStudentByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) CreateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/studentdetails.Student/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) UpdateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/studentdetails.Student/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) DeleteStudent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/studentdetails.Student/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServer is the server API for Student service.
// All implementations must embed UnimplementedStudentServer
// for forward compatibility
type StudentServer interface {
	GetStudents(*Empty, Student_GetStudentsServer) error
	GetStudentBySection(context.Context, *Section) (*StudentInfo, error)
	GetStudentByClass(context.Context, *Class) (*StudentInfo, error)
	CreateStudent(context.Context, *StudentInfo) (*Id, error)
	UpdateStudent(context.Context, *StudentInfo) (*Status, error)
	DeleteStudent(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedStudentServer()
}

// UnimplementedStudentServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServer struct {
}

func (UnimplementedStudentServer) GetStudents(*Empty, Student_GetStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedStudentServer) GetStudentBySection(context.Context, *Section) (*StudentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentBySection not implemented")
}
func (UnimplementedStudentServer) GetStudentByClass(context.Context, *Class) (*StudentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentByClass not implemented")
}
func (UnimplementedStudentServer) CreateStudent(context.Context, *StudentInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedStudentServer) UpdateStudent(context.Context, *StudentInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedStudentServer) DeleteStudent(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedStudentServer) mustEmbedUnimplementedStudentServer() {}

// UnsafeStudentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServer will
// result in compilation errors.
type UnsafeStudentServer interface {
	mustEmbedUnimplementedStudentServer()
}

func RegisterStudentServer(s grpc.ServiceRegistrar, srv StudentServer) {
	s.RegisterService(&Student_ServiceDesc, srv)
}

func _Student_GetStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentServer).GetStudents(m, &studentGetStudentsServer{stream})
}

type Student_GetStudentsServer interface {
	Send(*StudentInfo) error
	grpc.ServerStream
}

type studentGetStudentsServer struct {
	grpc.ServerStream
}

func (x *studentGetStudentsServer) Send(m *StudentInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Student_GetStudentBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Section)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).GetStudentBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentdetails.Student/GetStudentBySection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).GetStudentBySection(ctx, req.(*Section))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_GetStudentByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Class)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).GetStudentByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentdetails.Student/GetStudentByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).GetStudentByClass(ctx, req.(*Class))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentdetails.Student/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).CreateStudent(ctx, req.(*StudentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentdetails.Student/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).UpdateStudent(ctx, req.(*StudentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentdetails.Student/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).DeleteStudent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Student_ServiceDesc is the grpc.ServiceDesc for Student service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Student_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "studentdetails.Student",
	HandlerType: (*StudentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentBySection",
			Handler:    _Student_GetStudentBySection_Handler,
		},
		{
			MethodName: "GetStudentByClass",
			Handler:    _Student_GetStudentByClass_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _Student_CreateStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _Student_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _Student_DeleteStudent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStudents",
			Handler:       _Student_GetStudents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/studentsapp.proto",
}
